/* Simple HTTP Server Example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/

#include <esp_wifi.h>
#include <esp_event.h>
#include <esp_log.h>
#include <esp_system.h>
#include <nvs_flash.h>
#include <sys/param.h>
#include "nvs_flash.h"
#include "esp_netif.h"
#include "esp_eth.h"
#include "protocol_examples_common.h"
#include "esp_tls_crypto.h"
#include <esp_http_server.h>
#include "driver/gpio.h"
// #include "driver/adc.h"
// #include "esp_adc/adc_continuous.h"
// #include "esp_adc_cal.h"
// #include "esp_adc/adc_cali.h"
// #include "esp_adc/adc_cali_scheme.h"
#include "math.h"


/* A simple example that demonstrates how to create GET and POST
 * handlers for the web server.
 */
static uint8_t s_led_state = 0;
uint32_t reading;
uint32_t voltage;
char voltage_txt[5];

static const char *TAG = "example";

#if CONFIG_EXAMPLE_BASIC_AUTH

typedef struct {
    char    *username;
    char    *password;
} basic_auth_info_t;

#define HTTPD_401      "401 UNAUTHORIZED"           /*!< HTTP Response 401 */

static char *http_auth_basic(const char *username, const char *password)
{
    int out;
    char *user_info = NULL;
    char *digest = NULL;
    size_t n = 0;
    asprintf(&user_info, "%s:%s", username, password);
    if (!user_info) {
        ESP_LOGE(TAG, "No enough memory for user information");
        return NULL;
    }
    esp_crypto_base64_encode(NULL, 0, &n, (const unsigned char *)user_info, strlen(user_info));

    /* 6: The length of the "Basic " string
     * n: Number of bytes for a base64 encode format
     * 1: Number of bytes for a reserved which be used to fill zero
    */
    digest = calloc(1, 6 + n + 1);
    if (digest) {
        strcpy(digest, "Basic ");
        esp_crypto_base64_encode((unsigned char *)digest + 6, n, (size_t *)&out, (const unsigned char *)user_info, strlen(user_info));
    }
    free(user_info);
    return digest;
}

/* An HTTP GET handler */
static esp_err_t basic_auth_get_handler(httpd_req_t *req)
{
    char *buf = NULL;
    size_t buf_len = 0;
    basic_auth_info_t *basic_auth_info = req->user_ctx;

    buf_len = httpd_req_get_hdr_value_len(req, "Authorization") + 1;
    if (buf_len > 1) {
        buf = calloc(1, buf_len);
        if (!buf) {
            ESP_LOGE(TAG, "No enough memory for basic authorization");
            return ESP_ERR_NO_MEM;
        }

        if (httpd_req_get_hdr_value_str(req, "Authorization", buf, buf_len) == ESP_OK) {
            ESP_LOGI(TAG, "Found header => Authorization: %s", buf);
        } else {
            ESP_LOGE(TAG, "No auth value received");
        }

        char *auth_credentials = http_auth_basic(basic_auth_info->username, basic_auth_info->password);
        if (!auth_credentials) {
            ESP_LOGE(TAG, "No enough memory for basic authorization credentials");
            free(buf);
            return ESP_ERR_NO_MEM;
        }

        if (strncmp(auth_credentials, buf, buf_len)) {
            ESP_LOGE(TAG, "Not authenticated");
            httpd_resp_set_status(req, HTTPD_401);
            httpd_resp_set_type(req, "application/json");
            httpd_resp_set_hdr(req, "Connection", "keep-alive");
            httpd_resp_set_hdr(req, "WWW-Authenticate", "Basic realm=\"Hello\"");
            httpd_resp_send(req, NULL, 0);
        } else {
            ESP_LOGI(TAG, "Authenticated!");
            char *basic_auth_resp = NULL;
            httpd_resp_set_status(req, HTTPD_200);
            httpd_resp_set_type(req, "application/json");
            httpd_resp_set_hdr(req, "Connection", "keep-alive");
            asprintf(&basic_auth_resp, "{\"authenticated\": true,\"user\": \"%s\"}", basic_auth_info->username);
            if (!basic_auth_resp) {
                ESP_LOGE(TAG, "No enough memory for basic authorization response");
                free(auth_credentials);
                free(buf);
                return ESP_ERR_NO_MEM;
            }
            httpd_resp_send(req, basic_auth_resp, strlen(basic_auth_resp));
            free(basic_auth_resp);
        }
        free(auth_credentials);
        free(buf);
    } else {
        ESP_LOGE(TAG, "No auth header received");
        httpd_resp_set_status(req, HTTPD_401);
        httpd_resp_set_type(req, "application/json");
        httpd_resp_set_hdr(req, "Connection", "keep-alive");
        httpd_resp_set_hdr(req, "WWW-Authenticate", "Basic realm=\"Hello\"");
        httpd_resp_send(req, NULL, 0);
    }

    return ESP_OK;
}

static httpd_uri_t basic_auth = {
    .uri       = "/basic_auth",
    .method    = HTTP_GET,
    .handler   = basic_auth_get_handler,
};

static void httpd_register_basic_auth(httpd_handle_t server)
{
    basic_auth_info_t *basic_auth_info = calloc(1, sizeof(basic_auth_info_t));
    if (basic_auth_info) {
        basic_auth_info->username = CONFIG_EXAMPLE_BASIC_AUTH_USERNAME;
        basic_auth_info->password = CONFIG_EXAMPLE_BASIC_AUTH_PASSWORD;

        basic_auth.user_ctx = basic_auth_info;
        httpd_register_uri_handler(server, &basic_auth);
    }
}
#endif

/* An HTTP GET handler */
static esp_err_t hello_get_handler(httpd_req_t *req)
{
    char*  buf;
    size_t buf_len;

    ESP_LOGI(TAG, "Turning the LED %s!", s_led_state == true ? "ON" : "OFF");
    s_led_state = !s_led_state;

    /* Get header value string length and allocate memory for length + 1,
     * extra byte for null termination */
    buf_len = httpd_req_get_hdr_value_len(req, "Host") + 1;
    if (buf_len > 1) {
        buf = malloc(buf_len);
        /* Copy null terminated value string into buffer */
        if (httpd_req_get_hdr_value_str(req, "Host", buf, buf_len) == ESP_OK) {
            ESP_LOGI(TAG, "Found header => Host: %s", buf);
        }
        free(buf);
    }

    buf_len = httpd_req_get_hdr_value_len(req, "Test-Header-2") + 1;
    if (buf_len > 1) {
        buf = malloc(buf_len);
        if (httpd_req_get_hdr_value_str(req, "Test-Header-2", buf, buf_len) == ESP_OK) {
            ESP_LOGI(TAG, "Found header => Test-Header-2: %s", buf);
        }
        free(buf);
    }

    buf_len = httpd_req_get_hdr_value_len(req, "Test-Header-1") + 1;
    if (buf_len > 1) {
        buf = malloc(buf_len);
        if (httpd_req_get_hdr_value_str(req, "Test-Header-1", buf, buf_len) == ESP_OK) {
            ESP_LOGI(TAG, "Found header => Test-Header-1: %s", buf);
        }
        free(buf);
    }

    /* Read URL query string length and allocate memory for length + 1,
     * extra byte for null termination */
    buf_len = httpd_req_get_url_query_len(req) + 1;
    if (buf_len > 1) {
        buf = malloc(buf_len);
        if (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK) {
            ESP_LOGI(TAG, "Found URL query => %s", buf);
            char param[32];
            /* Get value of expected key from query string */
            if (httpd_query_key_value(buf, "query1", param, sizeof(param)) == ESP_OK) {
                ESP_LOGI(TAG, "Found URL query parameter => query1=%s", param);
            }
            if (httpd_query_key_value(buf, "query3", param, sizeof(param)) == ESP_OK) {
                ESP_LOGI(TAG, "Found URL query parameter => query3=%s", param);
            }
            if (httpd_query_key_value(buf, "query2", param, sizeof(param)) == ESP_OK) {
                ESP_LOGI(TAG, "Found URL query parameter => query2=%s", param);
            }
        }
        free(buf);
    }

    char* led_state_string="OFF";

    led_state_string = (s_led_state == true ? "ON" : "OFF");
    ESP_LOGI(TAG, "s_led_state is: %i", s_led_state);
    ESP_LOGI(TAG, "led state string is: %s",led_state_string);

    /* Set some custom headers */
    httpd_resp_set_hdr(req, "Custom-Header-1", "Custom-Value-1");
    httpd_resp_set_hdr(req, "Custom-Header-2", "Custom-Value-2");

    /* Send response with custom headers and body set as the
     * string passed in user context*/
    char foo[100];
    strcpy(foo,req->user_ctx);
    strcat(foo,led_state_string);

    // const char* resp_str = (const char*) req->user_ctx;
    const char* resp_str = (const char*) foo;

    httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);

    /* After sending the HTTP response the old HTTP request
     * headers are lost. Check if HTTP request headers can be read now. */
    if (httpd_req_get_hdr_value_len(req, "Host") == 0) {
        ESP_LOGI(TAG, "Request headers lost");
    }
    return ESP_OK;
}

static const httpd_uri_t hello = {
    .uri       = "/hello",
    .method    = HTTP_GET,
    .handler   = hello_get_handler,
    /* Let's pass response string in user
     * context to demonstrate it's usage */
    .user_ctx  = "EV Charger is: "
};

/* An HTTP GET handler for reading ADC */
static esp_err_t hello_adc_handler(httpd_req_t *req)
{
    // char*  buf;
    // size_t buf_len;

    // ESP_LOGI(TAG, "voltage on ADC1_CHANNEL_7: %d",Voltage);


    /* Set some custom headers */
    httpd_resp_set_hdr(req, "Custom-Header-1", "Custom-Value-1");
    httpd_resp_set_hdr(req, "Custom-Header-2", "Custom-Value-2");

    /* Send response with custom headers and body set as the
     * string passed in user context*/
    char foo[100];
    strcpy(foo,req->user_ctx);
    sprintf(voltage_txt,"%lu",voltage);
    strcat(foo,voltage_txt);

    // const char* resp_str = (const char*) req->user_ctx;
    const char* resp_str = (const char*) foo;

    httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);

    /* After sending the HTTP response the old HTTP request
     * headers are lost. Check if HTTP request headers can be read now. */
    // if (httpd_req_adc_hdr_value_len(req, "Host") == 0) {
    //     ESP_LOGI(TAG, "Request headers lost");
    // }
    return ESP_OK;
}

static const httpd_uri_t adc = {
    .uri       = "/adc",
    .method    = HTTP_GET,
    .handler   = hello_adc_handler,
    /* Let's pass response string in user
     * context to demonstrate it's usage */
    .user_ctx  = "ADC value is: "
};

/* An HTTP POST handler */
static esp_err_t echo_post_handler(httpd_req_t *req)
{
    char buf[100];
    int ret, remaining = req->content_len;

    while (remaining > 0) {
        /* Read the data for the request */
        if ((ret = httpd_req_recv(req, buf,
                        MIN(remaining, sizeof(buf)))) <= 0) {
            if (ret == HTTPD_SOCK_ERR_TIMEOUT) {
                /* Retry receiving if timeout occurred */
                continue;
            }
            return ESP_FAIL;
        }

        /* Send back the same data */
        httpd_resp_send_chunk(req, buf, ret);
        remaining -= ret;

        /* Log data received */
        ESP_LOGI(TAG, "=========== RECEIVED DATA ==========");
        ESP_LOGI(TAG, "%.*s", ret, buf);
        ESP_LOGI(TAG, "====================================");
    }

    // End response
    httpd_resp_send_chunk(req, NULL, 0);
    return ESP_OK;
}

static const httpd_uri_t echo = {
    .uri       = "/echo",
    .method    = HTTP_POST,
    .handler   = echo_post_handler,
    .user_ctx  = NULL
};

/* This handler allows the custom error handling functionality to be
 * tested from client side. For that, when a PUT request 0 is sent to
 * URI /ctrl, the /hello and /echo URIs are unregistered and following
 * custom error handler http_404_error_handler() is registered.
 * Afterwards, when /hello or /echo is requested, this custom error
 * handler is invoked which, after sending an error message to client,
 * either closes the underlying socket (when requested URI is /echo)
 * or keeps it open (when requested URI is /hello). This allows the
 * client to infer if the custom error handler is functioning as expected
 * by observing the socket state.
 */
esp_err_t http_404_error_handler(httpd_req_t *req, httpd_err_code_t err)
{
    if (strcmp("/hello", req->uri) == 0) {
        httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, "/hello URI is not available");
        /* Return ESP_OK to keep underlying socket open */
        return ESP_OK;
    } else if (strcmp("/echo", req->uri) == 0) {
        httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, "/echo URI is not available");
        /* Return ESP_FAIL to close underlying socket */
        return ESP_FAIL;
    }
    /* For any other URI send 404 and close socket */
    httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, "Some 404 error message");
    return ESP_FAIL;
}

/* An HTTP PUT handler. This demonstrates realtime
 * registration and deregistration of URI handlers
 */
static esp_err_t ctrl_put_handler(httpd_req_t *req)
{
    char buf;
    int ret;

    if ((ret = httpd_req_recv(req, &buf, 1)) <= 0) {
        if (ret == HTTPD_SOCK_ERR_TIMEOUT) {
            httpd_resp_send_408(req);
        }
        return ESP_FAIL;
    }

    if (buf == '0') {
        /* URI handlers can be unregistered using the uri string */
        ESP_LOGI(TAG, "Unregistering /hello and /echo URIs");
        httpd_unregister_uri(req->handle, "/hello");
        httpd_unregister_uri(req->handle, "/echo");
        /* Register the custom error handler */
        httpd_register_err_handler(req->handle, HTTPD_404_NOT_FOUND, http_404_error_handler);
    }
    else {
        ESP_LOGI(TAG, "Registering /hello and /echo URIs");
        httpd_register_uri_handler(req->handle, &hello);
        httpd_register_uri_handler(req->handle, &echo);
        /* Unregister custom error handler */
        httpd_register_err_handler(req->handle, HTTPD_404_NOT_FOUND, NULL);
    }

    /* Respond with empty body */
    httpd_resp_send(req, NULL, 0);
    return ESP_OK;
}

static const httpd_uri_t ctrl = {
    .uri       = "/ctrl",
    .method    = HTTP_PUT,
    .handler   = ctrl_put_handler,
    .user_ctx  = NULL
};

static httpd_handle_t start_webserver(void)
{
    httpd_handle_t server = NULL;
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    config.lru_purge_enable = true;

    // Start the httpd server
    ESP_LOGI(TAG, "Starting server on port: '%d'", config.server_port);
    if (httpd_start(&server, &config) == ESP_OK) {
        // Set URI handlers
        ESP_LOGI(TAG, "Registering URI handlers");
        httpd_register_uri_handler(server, &hello);
        httpd_register_uri_handler(server, &adc);
        httpd_register_uri_handler(server, &echo);
        httpd_register_uri_handler(server, &ctrl);
        #if CONFIG_EXAMPLE_BASIC_AUTH
        httpd_register_basic_auth(server);
        #endif
        return server;
    }

    ESP_LOGI(TAG, "Error starting server!");
    return NULL;
}

static void stop_webserver(httpd_handle_t server)
{
    // Stop the httpd server
    httpd_stop(server);
}

static void disconnect_handler(void* arg, esp_event_base_t event_base,
                               int32_t event_id, void* event_data)
{
    httpd_handle_t* server = (httpd_handle_t*) arg;
    if (*server) {
        ESP_LOGI(TAG, "Stopping webserver");
        stop_webserver(*server);
        *server = NULL;
    }
}

static void connect_handler(void* arg, esp_event_base_t event_base,
                            int32_t event_id, void* event_data)
{
    httpd_handle_t* server = (httpd_handle_t*) arg;
    if (*server == NULL) {
        ESP_LOGI(TAG, "Starting webserver");
        *server = start_webserver();
    }
}

// ***** function calls ******
float getVrms()
{

//float VppI,VppV;//,Vdc;
//int Vpp_bits;
uint32_t counter=0;//,readValueI=0,readValueV=0,readRawValue=0,lastreadValueI=0,lastreadValueV=0,accumulated_readValueI=0,accumulated_readValueV=0; 
// Current Now = alpha * Current Now + (1 – alpha) * Last Current Reading - ("complementary filter")
//uint32_t maxValueI=0, maxValueV=0;             // store max value here
//uint32_t minValueI=4096, minValueV=4096;          // store min value here ESP32 ADC resolution
uint32_t I[5000];// ,V[5000]; //,IFullWave[5000],VFullWave[5000];  // array for reads from ADCs
int zero_crossings[5000];
float Vrms;
float Vq=Vcc*Resistor_Divider;

uint32_t start_time = esp_log_timestamp();

// Initialize current sensor input
adc1_config_width(ADC_WIDTH_BIT_12);
adc1_config_channel_atten(ADC1_CHANNEL_7, ADC_ATTEN_DB_11);  // 11 gives full-scale voltage of 3.9V - ACS712 30A Range Current Sensor Module 
adc1_config_channel_atten(ADC1_CHANNEL_6, ADC_ATTEN_DB_11);  // 11 gives full-scale voltage of 3.9V - ZMPT101B AC Single Phase Voltage Sensor Module

while((esp_log_timestamp()-start_time) < 510) //sample for ~500 mS (30 cycles)
{ 
    I[counter]=esp_adc_cal_raw_to_voltage(adc1_get_raw(ADC1_CHANNEL_7),adc_chars);
    //  V[counter]=esp_adc_cal_raw_to_voltage(adc1_get_raw(ADC1_CHANNEL_6),adc_chars);
    counter++;
}
int i,j=0;
for (i=DISCARD;i<counter;i++) {  // get a V cycle after discarding first samples
    if ((I[counter]-Vq)<0 && (I[counter-1]-Vq)>=0) {  //find zero crossings
        zero_crossings[j++]=i;
    }
}
// calculate RMS for first cycle
counter=0;
Vrms=0;
for (j=zero_crossings[0];j<=zero_crossings[1];j++) {
    Vrms+=I[j]*I[j];  //square the current and add to last squared sample
    counter++;
}
Vrms=Vrms/counter; //average the sum of the squares

//     // readRawValue=adc1_get_raw(ADC1_CHANNEL_7);
//     // if (lastreadValueI==0) lastreadValueI=readRawValue;   // get rid of startup value anomaly

//     readValueI=(ALPHA*adc1_get_raw(ADC1_CHANNEL_7))+((1-ALPHA)*lastreadValueI);
//     readValueV=(ALPHA*adc1_get_raw(ADC1_CHANNEL_6))+((1-ALPHA)*lastreadValueV);
//     // readValue=adc1_get_raw(ADC1_CHANNEL_7);
//     lastreadValueI=readValueI;
//     lastreadValueV=readValueV;

//     accumulated_readValueI+=readValueI;
//     accumulated_readValueV+=readValueV;

//     // ESP_LOGI(TAG, "counter: %d      DISCARD %d",counter,DISCARD); 
//     // ESP_LOGI(TAG, "readValueI: %d      readValueV: %d",readValueI,readValueV); 

//     if (counter > DISCARD) {   // throw out initial ADC readings to give it time to settle
//         if (readValueI > maxValueI) maxValueI = readValueI;
//         if (readValueV > maxValueV) maxValueV = readValueV;

//         if (readValueI < minValueI) minValueI = readValueI;
//         if (readValueV < minValueV) minValueV = readValueV;
//     }
//     counter++;
// }
// readValueI=accumulated_readValueI/counter;
// readValueV=accumulated_readValueV/counter;

// // Subtract min voltage from max voltage
// //ESP32 ADC resolution 4096.  Measured voltage across ACS712 4.82v.  Voltage dividier 1MΩ/3MΩ.
// // Vpp = (esp_adc_cal_raw_to_voltage(maxValue, adc_chars) - esp_adc_cal_raw_to_voltage(minValue, adc_chars)); 
// VppI = maxValueI- minValueI;
// VppV = maxValueV- minValueV; 

// ESP_LOGI(TAG, minValueI: %d   maxValueI: %d   minValueV: %d   maxValueV: %d",minValueI,maxValueI,minValueV,maxValueV); 
// ESP_LOGI(TAG, "minValue: %d   maxValue: %d  Vpp(bits): %d",minValue,maxValue, (maxValue-minValue)); 
// Vdc=(esp_adc_cal_raw_to_voltage(readValue, adc_chars)/4095.0)*ATTEN_DB_11;
// ESP_LOGI(TAG, "Vpp:%fmV   Vrms:%fmV readValue:%d Vdc:%f",Vpp,Vpp/(4*sqrt(2)),readValue,Vdc); 

// result =  (esp_adc_cal_raw_to_voltage(readValue, adc_chars))/1000; //ESP32 ADC resolution 4096, 1K/3.3K voltage divider

return Vrms;
}


void app_main(void)
{
static httpd_handle_t server = NULL;

ESP_ERROR_CHECK(nvs_flash_init());
ESP_ERROR_CHECK(esp_netif_init());
ESP_ERROR_CHECK(esp_event_loop_create_default());

/* This helper function configures Wi-Fi or Ethernet, as selected in menuconfig.
 * Read "Establishing Wi-Fi or Ethernet Connection" section in
 * examples/protocols/README.md for more information about this function.
 */
ESP_ERROR_CHECK(example_connect());

/* Register event handlers to stop the server when Wi-Fi or Ethernet is disconnected,
 * and re-start it upon connection.
 */
#ifdef CONFIG_EXAMPLE_CONNECT_WIFI
ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &connect_handler, &server));
ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, &disconnect_handler, &server));
#endif // CONFIG_EXAMPLE_CONNECT_WIFI
#ifdef CONFIG_EXAMPLE_CONNECT_ETHERNET
ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_ETH_GOT_IP, &connect_handler, &server));
ESP_ERROR_CHECK(esp_event_handler_register(ETH_EVENT, ETHERNET_EVENT_DISCONNECTED, &disconnect_handler, &server));
#endif // CONFIG_EXAMPLE_CONNECT_ETHERNET

/* Start the server for the first time */
server = start_webserver();
ESP_LOGI(TAG, "Started webserver!!!");

// initialize relay control GPIO
#define GPIO_PIN 18

gpio_reset_pin(GPIO_PIN);
/* Set the GPIO as a push/pull output */
gpio_set_direction(GPIO_PIN, GPIO_MODE_OUTPUT);
gpio_set_level(GPIO_PIN, false);

// static uint8_t s_led_state = 0;

// Initialize current sensor input
// adc1_config_width(ADC_WIDTH_BIT_12);
// adc1_config_channel_atten(ADC1_CHANNEL_7, ADC_ATTEN_DB_11);  // 11 gives full-scale voltage of 3.9V

/* Block for 500ms. */
const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
ESP_LOGI(TAG, "portTICK_PERIOD_MS is: '%d'", portTICK_PERIOD_MS);


//Characterize ADC at particular atten
#define DEFAULT_VREF 1295
// esp_adc_cal_characteristics_t *adc_chars = calloc(1, sizeof(esp_adc_cal_characteristics_t));
// esp_adc_cal_value_t val_type = esp_adc_cal_characterize(ADC_UNIT_1, ADC_ATTEN_DB_11, ADC_WIDTH_BIT_12, DEFAULT_VREF, adc_chars);
ESP_LOGI(TAG, "calibration scheme version is %s", "Curve Fitting");
adc_cali_curve_fitting_config_t cali_config = {
    .unit_id = ADC_UNIT_1,
    .atten = DC_ATTEN_DB_11,
    .bitwidth = ADC_WIDTH_BIT_12,
};
ESP_ERROR_CHECK(adc_cali_create_scheme_curve_fitting(&cali_config, &handle));

//Check type of calibration value used to characterize ADC
if (val_type == ESP_ADC_CAL_VAL_EFUSE_VREF) {
    printf("eFuse Vref\n");
} else if (val_type == ESP_ADC_CAL_VAL_EFUSE_TP) {
    printf("Two Point\n");
} else {
    printf("Default\n");
}

#define ALPHA .1
#define DISCARD 40
#define R1 1014   //voltage divider resistor R1 in kΩ
#define R2 990   //voltage divider resistor R1 in kΩ
#define Vcc 5.0
#define ACS712_Vcc  4.81  //voltage range of current sensor
#define ATTEN_DB_11 3.9 // DB11 is a 3.9V full range

double mVperAmp = 66.0;           // this the 30A version of the ACS712 -use 100 for 20A Module and 66 for 30A Module divided down by voltage divider
double Resistor_Divider = R2;
Resistor_Divider = Resistor_Divider / (R1+R2);
mVperAmp=mVperAmp*Resistor_Divider;
double Watts = 0;
//double VoltagePP = 0;
//double VRMS = 0;
//double AmpsRMS = 0;


 // *****  
 
// void loop() {
//   // Serial.println (""); 
//   Voltage = getVPP();
  // VRMS = (Voltage/2.0) *0.707;   //root 1/2 is 0.707
//   AmpsRMS = ((VRMS * 1000)/mVperAmp)-0.3; //0.3 is the error I got for my sensor
 
//   // Serial.print(AmpsRMS);
//   // Serial.print(" Amps RMS  ---  ");
//   Watt = (AmpsRMS*240/1.2);
//   // note: 1.2 is my own empirically established calibration factor
// // as the voltage measured at A0 depends on the length of the OUT-to-A0 wire
// // 240 is the main AC power voltage – this parameter changes locally
 
// delay (100);
// }
 
    /* start loop */

while (1) {
    #define VoltageOffset_off 18  // 18mV of noise with no current
    #define VoltageOffset_on 120  // 120mV of noise with current
    // reading =  adc1_get_raw(ADC1_CHANNEL_7);
    // voltage = esp_adc_cal_raw_to_voltage(reading, adc_chars);    
    // VoltagePP = getVPP();
    float Vrms = getVrms();
    // if (VoltagePP >50) VoltagePP-=VoltageOffset_on;  //adjust for noise
    // else VoltagePP-=VoltageOffset_off;
    // VRMS = VoltagePP/(sqrt(2)*2); 
    float Arms = Vrms/mVperAmp; 
// 
    Watts = Arms*121; // measured line voltage on shop bench

    ESP_LOGI(TAG, "Resistor_Divider:%lf    mVperAmp:%lf    VRMS:%lf   AmpsRMS: %lf   Watts: %f",Resistor_Divider,mVperAmp,Vrms/1000 ,Arms,Watts);
    // ESP_LOGI(TAG, "%s: voltage on ADC1_CHANNEL_7:%lf  Amps:%lf  Watts:%d",s_led_state == true ? "ON" : "OFF",Voltage, Amps, abs(Watts));

    /* Toggle the LED state */
    // ESP_LOGI(TAG, "Turning the LED %s!", s_led_state == true ? "ON" : "OFF");
    gpio_set_level(GPIO_PIN, s_led_state);

    vTaskDelay(xDelay);
 }
}
